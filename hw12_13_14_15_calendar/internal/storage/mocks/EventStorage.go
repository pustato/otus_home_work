// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"
	"github.com/pustato/otus_home_work/hw12_13_14_15_calendar/internal/storage"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// EventStorage is an autogenerated mock type for the EventStorage type
type EventStorage struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, event
func (_m *EventStorage) Create(ctx context.Context, event *storage.Event) (int64, error) {
	ret := _m.Called(ctx, event)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *storage.Event) int64); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *storage.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *EventStorage) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindForInterval provides a mock function with given fields: ctx, userID, from, to, limit, offset
func (_m *EventStorage) FindForInterval(ctx context.Context, userID int64, from time.Time, to time.Time, limit uint8, offset uint8) ([]*storage.Event, error) {
	ret := _m.Called(ctx, userID, from, to, limit, offset)

	var r0 []*storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, int64, time.Time, time.Time, uint8, uint8) []*storage.Event); ok {
		r0 = rf(ctx, userID, from, to, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, time.Time, time.Time, uint8, uint8) error); ok {
		r1 = rf(ctx, userID, from, to, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *EventStorage) GetByID(ctx context.Context, id int64) (*storage.Event, error) {
	ret := _m.Called(ctx, id)

	var r0 *storage.Event
	if rf, ok := ret.Get(0).(func(context.Context, int64) *storage.Event); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, event
func (_m *EventStorage) Update(ctx context.Context, event *storage.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
